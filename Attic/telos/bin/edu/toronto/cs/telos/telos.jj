/**
 * @author Yijun Yu
 * @date   Oct 17, 2004
 */
options {
  LOOKAHEAD = 1;
  JAVA_UNICODE_ESCAPE = true;
  //STATIC = false;
}
PARSER_BEGIN(TelosParser)
package edu.toronto.cs.telos;
public class TelosParser {
  public static void main(String args[]) {
    TelosParser parser;
    if (args.length == 0) {
      System.out.println("Telos Parser Version 0.1:  Reading from standard input . . .");
      parser = new TelosParser(System.in);
    } else if (args.length == 1) {
      System.out.println("Telos Parser Version 0.1:  Reading from file " + args[0] + " . . .");
      try {
        parser = new TelosParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Telos Parser Version 0.1:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Telos Parser Version 0.1:  Usage is one of:");
      System.out.println("         java TelosParser < inputfile");
      System.out.println("OR");
      System.out.println("         java TelosParser inputfile");
      return;
    }
    try {
      java.util.ArrayList a = parser.Tokens();
      System.out.println("Telos Parser Version 0.1:  Telos program parsed successfully.");
    } catch (ParseException e) {
      System.out.println("Telos Parser Version 0.1:  Encountered errors during parse.");
      e.printStackTrace();
    }
  }
}
PARSER_END(TelosParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* RESERVED WORDS AND LITERALS */
{
  < IN: "IN" >
| < ISA: "ISA" >
| < WITH: "WITH" >
| < END: "END" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        ("-")? <DECIMAL_LITERAL> (["l","L"])?
      | ("-")? <HEX_LITERAL> (["l","L"])?
      | ("-")? <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL:  ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        ("-")? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | ("-")? "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | ("-")? (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | ("-")? (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN : /* IDENTIFIERS */
{
  < ID: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < COMMA: "," >
| < COLON: ":" >
}

/*****************************************
 * THE TELOS LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

java.util.ArrayList Tokens() :
{ TelosParserIndividual t; 
  java.util.ArrayList a = new java.util.ArrayList();
}
{
  ( t = TelosToken() { a.add(t); } )*
  <EOF>
  {return a;}
}

TelosParserIndividual TelosToken() :
{
	Token cls = null;
	Token id = null;
	java.util.ArrayList types = null;
	java.util.ArrayList parents = null;
	java.util.HashMap attributes = null;
}
{
  cls=<ID> 
  id=<ID>
  [ <IN> types=TypeList() ]
  [ <ISA> parents=ParentList() ]
  [ <WITH> attributes=AttributeList() ]
  <END>
  {
    return new TelosParserIndividual(cls.toString(), id.toString(), types, parents, attributes);
  }
}
java.util.ArrayList TypeList() :
{
	Token id;
	java.util.ArrayList a = new java.util.ArrayList();
}
{
	[<COMMA>] id=<ID> { a.add(id.toString()); }
	(<COMMA> id=<ID> { a.add(id.toString()); } )*
	{ return a; }
}
java.util.ArrayList ParentList() :
{
	Token id;
	java.util.ArrayList a = new java.util.ArrayList();
}
{
	[<COMMA>] id=<ID> { a.add(id.toString()); }
	(<COMMA> id=<ID> { a.add(id.toString()); } )*
	{ return a; }
}
java.util.HashMap AttributeList() :
{
	java.util.HashMap a = new java.util.HashMap();
	java.util.ArrayList ids;
	Object value;
}
{
	(ids=IdList() <COLON> value=Literal()
		{
			if (a.get(ids)!=null) {
			   String suffix = "-" + a.size();				
			   ids.set(ids.size()-1, ((String) ids.get(ids.size()-1)) + suffix);
			}
			a.put(ids, value);
		}
	)*
	{
		return a;
	}
}

java.util.ArrayList IdList() :
{
	Token id;
	java.util.ArrayList a = new java.util.ArrayList();
}
{
	([<COMMA>] id=<ID> { a.add(id.toString()); })*
	{ return a; }
}

Object Literal() :
{
  Token v;
  Object l;
}
{
	( v=<INTEGER_LITERAL> {l = new Integer(Integer.parseInt(v.toString()));}
	| v=<STRING_LITERAL> {l = v.toString();}
	| v=<FLOATING_POINT_LITERAL> {l = new Float(Float.parseFloat(v.toString()));}
	| v=<ID> {l = new String(v.toString());}
	)
	{ return l;}
}