import q7dsl;
import codeassist;

extension q7::dsl::EditorExtensions;


/* proposals for Feature Why::name */
List[Proposal] completeWhy_name(emf::EObject ctx, String prefix) :
	{newProposal("WhyName")};

/* proposals for Feature FLOAT::decimal */
List[Proposal] completeFLOAT_decimal(emf::EObject ctx, String prefix) :
	{newProposal("FLOATDecimal")};

/* proposals for Feature Topic::name */
List[Proposal] completeTopic_name(emf::EObject ctx, String prefix) :
	{newProposal("TopicName")};

/* proposals for Feature Actor::name */
List[Proposal] completeActor_name(emf::EObject ctx, String prefix) :
	{newProposal("ActorName")};

/* proposals for Feature Actor::name */
List[Proposal] completeActor_name(emf::EObject ctx, String prefix) :
	{newProposal("ActorName")};

/* proposals for Feature FLOAT::integral */
List[Proposal] completeFLOAT_integral(emf::EObject ctx, String prefix) :
	{newProposal("FLOATIntegral")};

/* proposals for Feature Why::name */
List[Proposal] completeWhy_name(emf::EObject ctx, String prefix) :
	{newProposal("WhyName")};

/* proposals for Feature Topic::name */
List[Proposal] completeTopic_name(emf::EObject ctx, String prefix) :
	{newProposal("TopicName")};






/* proposals for Type What */
List[Proposal] completeWhat(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type Topic */
List[Proposal] completeTopic(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type FLOAT */
List[Proposal] completeFLOAT(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type Why */
List[Proposal] completeWhy(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type Label */
List[Proposal] completeLabel(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type Where */
List[Proposal] completeWhere(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type Op */
List[Proposal] completeOp(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type LabelEnumerator */
List[Proposal] completeLabelEnumerator(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type Who */
List[Proposal] completeWho(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type Advice */
List[Proposal] completeAdvice(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type Enrichment */
List[Proposal] completeEnrichment(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type Actor */
List[Proposal] completeActor(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type HowMuch */
List[Proposal] completeHowMuch(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type How */
List[Proposal] completeHow(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type DecompositionType */
List[Proposal] completeDecompositionType(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type HowMuchRules */
List[Proposal] completeHowMuchRules(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;

/* proposals for Type When */
List[Proposal] completeWhen(emf::EObject grammarElement, emf::EObject ctx, String prefix) :
	null;


// create extensions
Proposal newProposal(String proposal) :
	newProposal(proposal,proposal);
	
Proposal newProposal(String label, String toReplace) :
	newProposal(label,toReplace,"default.gif");
	
create Proposal newProposal(String label, String replace, String image) :
	setLabel(label==null?"ERROR":label)->
	setToInsert(replace==null?"ERROR":replace)->
	setImage(image);
