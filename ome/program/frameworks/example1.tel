# Example framework.
#
# This framework is not intended to be used to build powerful or interesting
# models, only to showcase the features supported by OME.  This example is
# discussed in the OME Power-User document.


# An element type declaration

SimpleClass MyFirstElement			    # (1)
	IN OMEElementClass, OMEInstantiableClass    # (2, 3)
	ISA OMEElement				    # (4)
    WITH
	name					    # (5)
	    : "Element"
	defaultname				    # (6)
	    : "An Element"
	imagename				    # (7)
	    : "Graphic1.gif"
	imagesize				    # (8)
	    width : 80;
	    height : 50
	autogui					    # (9)
	    : 1
END

# Explanations
#
# (1) - Class name
#
#      Every class needs a name.  This is how you would refer to this class
#      elsewhere in the framework specification.
#
# (2) - IN(stance of) OMEElementClass
#
#      All element types must be an instance of OMEElementClass
#
# (3) - IN(stance of) OMEInstantiableClass
#
#      All object types that can occur in the model (i.e. can be
#      instantiated), must be an instance of OMEInstantiableClass.
#
# (4) - ISA OMEElement
#
#      All element types be a specialization (a.k.a. subclass) of OMEElement.
#
# (5) - Attribute Category:  name
# 
#      OME expects one unlabeled attribute, which should be the name of the
#      type, as experienced by the user.  Any user interface dialogues that
#      refer the type will use this value.
#
# (6) - Attribute Category:  defaultname    (optional)
#
#      If this category exists, the tool expects one unlabeled attribute,
#      which is the default name for instances of this type (the user can
#      always change the name of any instance).  If omitted, the default name
#      will be the name of the type, followed by the internal unique integer
#      id assigned to the object.
#
# (7) - Attribute Category:  imagename
#
#      Expects one unlabeled attribute, which should be the name of the .gif
#      file which will be used to represent objects of this type.  The image
#      that is used should reside in ome/program/images/, otherwise an
#      exception will be thrown.
#
# (8) - Attribute Category:  imagesize      (optional)
#
#      If present, OME expects two attributes labeled "width" and "height".
#      The integer values specify the default dimensions (in pixels) of the
#      graphical representation of objects of this type.  If omitted, the
#      default dimensions will be those of the image specified under imagename.
#
# (9) - Attribute Category:  autogui        (optional)
#
#      If present, one unlabeled integer attribute is expected.  If the value
#      of the attribute is non-zero, the tool will automatically produce items
#      in the graphical user interface to allow users to instantiate objects
#      of this type.  If omitted, or given a value of zero, no user interface
#      items for this object will produced (automatically).





# A link type declaration

SimpleClass MyLink
	IN OMELinkClass, OMEInstantiableClass	    # (1)
	ISA OMELink				    # (2)
    WITH
	attribute				    # (3)
	    to : OMEObject;
	    from : MyFirstElement
	name
	    : "Link"
	imagename                                   # (4)
	    : "Arrow.gif"
	imagesize
	    width : 20;
	    height : 20
	stroke
	    : "dashed"				    # (5)
	autogui
	    : 1
END


# Explanations
#
# (1), (2) - Inheritance
#
#    Similar to elements, links must be instances of OMELinkClass and
#    specializations of OMELink.
#
# (3) - Attributes to and from
#
#    Links must have attributes named "to" and "from" under the attribute
#    category "attribute".  These attributes specify what types of objects
#    will be valid sources and destinations for this link.  This feature can
#    be used to place contstraints in your framework!
#
#    In this example, a MyLink can only have a MyFirstElement as its source,
#    but any type of object (including another link) as a destination, since
#    all instantiated objects  are specializations of OMEObject (via
#    OMEElement or OMELink).
#
#    Notice how we can use non-instantiable objects in our constraints
#    (OMEObject is not instantiable).  This is a very powerful mechanism.
#    Framework developers can create Object classes that are never meant to be
#    instantiated, but can be used to set up a hierarchy that may be utilized
#    in establishing the proper contraints.  We will make use of this in the
#    next example.
#
# (4) - Link image
#
#    Similar to an element, a link must provide an image.  This image however,
#    is used only for the "head" of the link (typically an arrow head).
#
# (5) - Attribute category:  stroke           (optional)
#
#    The tool expects one unnamed attribute under this category.  The value of
#    the attribute must be one of the supported stroke types.  If omitted, the
#    default value for this attribute is "solid".
#
#    Supported stroke types are:
#
#	    "solid"    -  a solid line
#           "dashed"   -  a dashed line
#           (more to come)



# Some more elements to showcase using constraints.

SimpleClass ValidChild				    # (1)
    ISA OMEElement
END

SimpleClass ChildA
	IN OMEElementClass, OMEInstantiableClass
	ISA OMEElement, ValidChild		    # (2)
    WITH
	name
	    : "Child A"
	imagename
	    : "Resource.gif"
	imagesize
	    width : 80;
	    height : 50
	autogui
	    : 1
END

SimpleClass ChildB
	IN OMEElementClass, OMEInstantiableClass
	ISA OMEElement, ValidChild		    # (2)
    WITH
	name
	    : "Child B"
	imagename
	    : "Task.gif"
	imagesize
	    width : 80;
	    height : 50
	autogui
	    : 1
END

# Declaring an expandable type, making use of contraints.

SimpleClass MyExpandableElement
	IN OMEElementClass, OMEInstantiableClass
	ISA OMEElement, OMEGrowableElement	    # (3)
    WITH
	attribute
	    children : ValidChild		    # (4)
	name
	    : "Expandable"
	imagename
	    : "Actor.gif"
	imagesize
	    width : 80;
	    height : 80
	autogui
	    : 1
END

# Explanation
#
# (1) - A non-instantiable class
#
#    A user will never be able to create a direct instance of the class
#    ValidChild (since it is not an instnace of OMEInstantiableClass), but we
#    can make use of this class in our framework.
#
# (2) - Instantiable subclasses of ValidChild
#
#    The declarations of types ChildA and ChildB are standard element type
#    declarations (instances of OMEElement, OMEInstantiableClass, subclass of
#    OMEElement), but are also subclasses of ValidChild.
#
# (3) - Declaring an element to be expandable.
#
#    Unfortunately, we use different words for the same concept (growable and
#    expandable).  To make an element expandable, simply make it a subclass of
#    OMEGrowableElement.
#
# (4) - attribute children
#
#    All expandable element types should have an attribute "children" under
#    the attribute category "attribute".  The value of this attribute should
#    be some element type.  In a very loosly constrained example, we could use
#    OMEElement.  Here, we have used ValidChild to demonstrate using
#    non-instantiable classes for constraining relationships.  In this
#    framework, ChildA and ChildB can be children (or "within the bounds") of
#    a MyExpandableElement, but a MyFirstElement cannot.



# Finally, we'll add a loosely constrained link that we will use in the
# ExamplePlugin.
SimpleClass ConnectLink
	IN OMELinkClass, OMEInstantiableClass	    # (1)
	ISA OMELink				    # (2)
    WITH
	attribute				    # (3)
	    to : OMEObject;
	    from : OMEObject
	name
	    : "Connect"
	imagename                                   # (4)
	    : "Arrow.gif"
	imagesize
	    width : 20;
	    height : 20
	stroke
	    : "solid"				    # (5)
	autogui
	    : 1
END
